<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        "
>
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" />  -->
	 <resources mapping="/**" location="/" />
	<beans:bean id="fansyTreeToJson" class="com.wemakeprice.commons.views.OutputFancyTreeToJson"></beans:bean>
	
    <!-- jsonView -->
    <beans:bean id="jsonViewer" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
        <beans:property name="extractValueFromSingleKeyModel" value="true" />
    </beans:bean>
	
    
    <!-- xmlView -->
    <beans:bean id="xmlViewer" class="com.wemakeprice.commons.lib.resolver.xml.MappingXmlView"></beans:bean>   
    
	
	<beans:bean id="marshaller" class="org.springframework.oxm.castor.CastorMarshaller" />
	 
	 
	<beans:bean id="xStreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
		<beans:property name="autodetectAnnotations" value="true"></beans:property>
	</beans:bean>
	
	
	
    <!-- Resolver 1st -->
   	<!-- View Resolver  해당 bean을 등록해야 Action class 에서 View 영역 호출이 가능 -->
	<beans:bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
    
    
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	-->
	
	<!-- DynamicTiles2 View Resolver 위에있는 View 리절버는 DynamicTiles2랑 연동이 되지 않으므로 새로 정의 -->
	<beans:bean  id="tilesViewResolver" class="org.springbyexample.web.servlet.view.tiles2.TilesUrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springbyexample.web.servlet.view.tiles2.DynamicTilesView"/>
		<beans:property name="prefix" value="/WEB-INF/views/"/>
        <beans:property name="suffix" value=".jsp"/>
		<beans:property name="tilesDefinitionName" value="default"/><!-- tilesDefinitionName 은 기본 tiles의 Definition 이름이다.  -->
		<beans:property name="tilesBodyAttributeName" value="body"/><!--  tilesBodyAttributeName 은 해당 바뀔 속성의 이름이다. 즉 view 영역의 개발자가 만든 화면 -->
		<beans:property name="tilesDefinitionDelimiter" value="."/><!-- tilesDefinitionDelimiter 상속시 구분자이다.  -->
	</beans:bean>
	
	<!-- Apache Tiles2 Configuration -->	
	<!-- Spring3 + dynamicTile2 연동 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/tilesConfig/tiles-template.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	
	
    <!-- Resolver 0 -->	
    <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <!-- ViewResolver 우선순위 설정 -->
        <beans:property name="order" value="0" />
        <beans:property name="mediaTypes">
            <!-- 맵핑될 확장자 정의 -->
            <beans:map>
                <beans:entry key="json"    value="application/json" /> 
                <beans:entry key="jsonp"  value="application/javascript" />
                <beans:entry key="xml"    value="application/xml" />
            </beans:map>
        </beans:property>
        
        <beans:property name="defaultViews">
            <beans:list>
                <!-- JSON 요청을 처리할 뷰 -->
                <beans:bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                   <beans:property name="extractValueFromSingleKeyModel" value="true" />
                   <beans:property name="contentType" value="application/json" />
                </beans:bean> 
                 
                <!-- JSONP 요청을 처리할 뷰 -->
                <beans:bean class="com.wemakeprice.commons.lib.resolver.jsonp.MappingJacksonJsonpView">
                   <beans:property name="extractValueFromSingleKeyModel" value="true" />
                   <beans:property name="contentType" value="application/javascript" />
                </beans:bean>
                
                
                <!-- XML 요청을 처리할 뷰 -->
                <!-- 
                <beans:bean class="com.wemakeprice.commons.lib.resolver.xml.MappingXmlView">
                    <beans:property name="contentType" value="application/xml" />
                </beans:bean>
                  -->
                 
                <!-- 마샬링뷰 처리할 뷰  -->
             <beans:bean id="xmlView" name="xmlView" class="org.springframework.web.servlet.view.xml.MarshallingView">
               <beans:property name="contentType" value="application/xml"></beans:property>
               <beans:property name="marshaller" ref="xStreamMarshaller"></beans:property><!-- org.springframework.oxm.xstream.XStreamMarshaller   -->
               <!-- <beans:property name="marshaller" ref="marshaller"></beans:property>  --><!-- org.springframework.oxm.castor.CastorMarshaller  -->
               <!-- <beans:property name="modelKey" value="*-info"></beans:property>  -->
             </beans:bean>

                
				
            </beans:list>
        </beans:property>
        
        <beans:property name="ignoreAcceptHeader" value="true" />
    </beans:bean>	
    
    <!-- interceptor -->
    <!-- 
	<mvc:interceptors>
		<beans:bean class="com.wemakeprice.commons.lib.interceptor.tiles.GosTilesInterceptor"></beans:bean>
	</mvc:interceptors>
	 -->
		
	<mvc:interceptors>
		<mvc:interceptor><!-- (business) 업무영역 인터셉터 -->
			<mvc:mapping path="/*/*/*/*.do"/>
			<mvc:mapping path="/*/*/*.do"/>
			<mvc:mapping path="/*/*.do"/>
			<beans:bean class="com.wemakeprice.commons.lib.interceptor.tiles.GosTilesInterceptor"></beans:bean>
		</mvc:interceptor>
	</mvc:interceptors>	
	
    
    <!-- proxy-target-class="true"
    	 @Aspect 가 선언되어있는 class를 찾아 Aspect로 등록시켜주는 후처리기를 설정한다 -->
    <aop:aspectj-autoproxy /> 
    
	<context:component-scan base-package="com.wemakeprice" />
	
	
</beans:beans>
